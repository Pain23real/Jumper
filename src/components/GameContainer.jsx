import React, { useState, useEffect, useRef } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import Game from './Game';
import NameMenu from './NameMenu';
import StartButton from './StartButton';
import PauseMenu from './PauseMenu';
import GameOver from './GameOver';
import Leaderboard from './Leaderboard';
import { savePlayerScore } from '../utils/gameHelpers';
import notificationManager from '../utils/notificationSystem';

const GameContainer = () => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { publicKey } = useWallet();
  const walletAddress = publicKey ? publicKey.toString() : null;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  const [playerName, setPlayerName] = useState(() => {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–º—è –∏–∑ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    if (walletAddress) {
      const walletNamesStr = localStorage.getItem('walletNames');
      const walletNames = walletNamesStr ? JSON.parse(walletNamesStr) : {};
      
      if (walletNames[walletAddress]) {
        return walletNames[walletAddress];
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ—à–µ–ª—å–∫—É, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∏–º—è
    return localStorage.getItem('playerName') || '';
  });
  
  const [showNameInput, setShowNameInput] = useState(!playerName);
  const [showStartButton, setShowStartButton] = useState(!!playerName);
  const [gameStarted, setGameStarted] = useState(false);
  const [gamePaused, setGamePaused] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [showLeaderboard, setShowLeaderboard] = useState(false);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã
    const showNameDialog = localStorage.getItem('showNameDialogOnGame');
    
    if (showNameDialog === 'true') {
      // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
      localStorage.removeItem('showNameDialogOnGame');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
      setShowNameInput(true);
      setShowStartButton(false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ Discord —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (walletAddress) {
        setTimeout(() => {
          notificationManager.createNotification(
            'Please enter your Discord nickname to start the game',
            {
              type: 'info',
              icon: 'üë§',
              duration: 8000
            }
          );
        }, 500);
      }
      
      return;
    }
    
    if (walletAddress) {
      const walletNamesStr = localStorage.getItem('walletNames');
      const walletNames = walletNamesStr ? JSON.parse(walletNamesStr) : {};
      
      if (walletNames[walletAddress]) {
        setPlayerName(walletNames[walletAddress]);
        setShowNameInput(false);
        setShowStartButton(true);
      } else {
        setShowNameInput(true);
        setShowStartButton(false);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ Discord —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        setTimeout(() => {
          notificationManager.createNotification(
            'Please enter your Discord nickname to start the game',
            {
              type: 'info',
              icon: 'üë§',
              duration: 8000
            }
          );
        }, 500);
      }
    }
  }, [walletAddress]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
  const [gameResult, setGameResult] = useState({
    score: 0,
    rank: null,
    level: 1
  });
  
  // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
  const gameRef = useRef(null);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–≥—Ä—ã
  const handleStartGame = () => {
    setShowStartButton(false);
    setGameStarted(true);
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏–≥—Ä—ã
    setTimeout(() => {
      if (gameRef.current) {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...');
        gameRef.current.startGame();
      }
    }, 300);
  };
  
  const handleGameOver = (result) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
    if (gameOver) {
      console.log("Game already in 'over' state, ignoring duplicate call");
      return;
    }
    
    console.log("Game over detected, score:", result.score);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
    const saveResult = savePlayerScore(playerName, result.score);
    
    if (saveResult.success) {
      setGameResult({
        score: result.score,
        rank: saveResult.rank,
        level: result.level,
        isNewRecord: saveResult.isNewRecord
      });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–≥—Ä—ã –≤ localStorage –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const gameResultKey = `last_game_over_${playerName}_${Date.now()}`;
    localStorage.setItem(gameResultKey, result.score.toString());
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    setGameOver(true);
    setGameStarted(false);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–ª–∞–≥–∏ –∏–≥—Ä—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('last_game_over_') && 
          Date.now() - parseInt(key.split('_').pop()) > 3600000) {
        localStorage.removeItem(key);
      }
    });
  };
  
  const handleGamePause = (isPaused) => {
    console.log("–í—ã–∑–≤–∞–Ω handleGamePause, —Å—Ç–∞–≤–∏–º isPaused =", isPaused);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setGamePaused(isPaused);
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ pauseGame —á–µ—Ä–µ–∑ ref
    if (isPaused && gameRef.current && !gameRef.current.isGameOver) {
      gameRef.current.pauseGame();
    }
  };
  
  const handleGameStart = (isStarted) => {
    setGameStarted(isStarted);
  };
  
  const handleRestartGame = () => {
    console.log("–í—ã–∑–≤–∞–Ω handleRestartGame");
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    setGameOver(false);
    setGamePaused(false);
    setGameStarted(true);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
    localStorage.removeItem('sendingInProgress');
    localStorage.removeItem('lastSentScore');
    localStorage.removeItem('lastSentTimestamp');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø–µ—Ä–µ–¥ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º —Ç–æ–∂–µ
    setTimeout(() => {
      if (gameRef.current) {
        console.log("–í—ã–ø–æ–ª–Ω—è–µ–º resetGame –∏ startGame");
        gameRef.current.resetGame();
        gameRef.current.startGame();
      }
    }, 300);
  };
  
  const handleResumePaused = () => {
    console.log("–í—ã–∑–≤–∞–Ω handleResumePaused");
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    if (!gamePaused) return;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setGamePaused(false);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ resumeGame —á–µ—Ä–µ–∑ ref
    setTimeout(() => {
      if (gameRef.current && !gameRef.current.isGameOver) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ resumeGame, –∞ –Ω–µ startGame
        if (typeof gameRef.current.resumeGame === 'function') {
          gameRef.current.resumeGame();
        } else {
          // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º togglePause
          gameRef.current.togglePause();
        }
      }
    }, 50);
  };
  
  const handleSaveName = (name) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫)
    if (walletAddress) {
      const walletNamesStr = localStorage.getItem('walletNames');
      const walletNames = walletNamesStr ? JSON.parse(walletNamesStr) : {};
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –∫—Ç–æ-—Ç–æ —ç—Ç–æ—Ç –Ω–∏–∫, –∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –æ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ—à–µ–ª—å–∫—É
      const isNameTaken = Object.entries(walletNames).some(
        ([address, nickname]) => nickname === name && address !== walletAddress
      );
      
      if (isNameTaken) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        console.error("–≠—Ç–æ—Ç –Ω–∏–∫ Discord —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–æ—à–µ–ª—å–∫—É");
        notificationManager.createNotification(
          'This Discord nickname is already linked to another wallet',
          {
            type: 'error',
            icon: '‚ö†Ô∏è',
            duration: 6000
          }
        );
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      walletNames[walletAddress] = name;
      localStorage.setItem('walletNames', JSON.stringify(walletNames));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    setPlayerName(name);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.setItem('playerName', name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
    setShowNameInput(false);
    setShowStartButton(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ showNameDialogOnGame
    const wasFromMainPage = localStorage.getItem('showNameDialogOnGame') === 'true';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    notificationManager.createNotification(
      'Discord nickname successfully saved!',
      {
        type: 'success',
        icon: '‚úÖ',
        duration: 4000
      }
    );
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (wasFromMainPage) {
      setTimeout(() => {
        handleStartGame();
      }, 500);
    }
  };
  
  const handleShowLeaderboard = () => {
    setShowLeaderboard(true);
  };
  
  const handleCloseLeaderboard = () => {
    setShowLeaderboard(false);
    
    // –ù–µ —Å–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞, –µ—Å–ª–∏ –±—ã–ª Game Over
    if (!gameOver && gamePaused) {
      // –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      setGamePaused(false);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ resumeGame —á–µ—Ä–µ–∑ ref
      setTimeout(() => {
        if (gameRef.current && !gameRef.current.isGameOver) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ resumeGame, –∞ –Ω–µ startGame
          if (typeof gameRef.current.resumeGame === 'function') {
            gameRef.current.resumeGame();
          } else {
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º togglePause
            gameRef.current.togglePause();
          }
        }
      }, 50);
    }
  };
  
  // Detect mobile devices for displaying controls
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, []);
  
  // Handlers for mobile controls
  const handleLeftStart = (e) => {
    e.preventDefault();
    if (gameRef.current && gameStarted && !gamePaused && !gameOver) {
      gameRef.current.startMoveLeft();
    }
  };
  
  const handleLeftEnd = (e) => {
    e.preventDefault();
    if (gameRef.current) {
      gameRef.current.stopMoveLeft();
    }
  };
  
  const handleRightStart = (e) => {
    e.preventDefault();
    if (gameRef.current && gameStarted && !gamePaused && !gameOver) {
      gameRef.current.startMoveRight();
    }
  };
  
  const handleRightEnd = (e) => {
    e.preventDefault();
    if (gameRef.current) {
      gameRef.current.stopMoveRight();
    }
  };
  
  return (
    <div className="game-container">
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã */}
      <Game
        ref={gameRef}
        playerName={playerName}
        setPlayerName={setPlayerName}
        onGameOver={handleGameOver}
        onGameStart={handleGameStart}
        onGamePause={handleGamePause}
      />
      
      {/* –ú–µ–Ω—é –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ */}
      <NameMenu
        visible={showNameInput}
        onSave={handleSaveName}
        initialName={playerName}
        walletConnected={!!walletAddress}
      />
      
      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã */}
      <StartButton
        visible={!gameStarted && !gameOver && showStartButton && !showNameInput}
        onStart={handleStartGame}
      />
      
      {/* –ú–µ–Ω—é –ø–∞—É–∑—ã */}
      <PauseMenu
        visible={gamePaused && !gameOver}
        onResume={handleResumePaused}
        onRestart={handleRestartGame}
        onShowLeaderboard={handleShowLeaderboard}
      />
      
      {/* –≠–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã */}
      <GameOver
        visible={gameOver}
        score={gameResult.score}
        rank={gameResult.rank}
        onRestart={handleRestartGame}
        onShowLeaderboard={handleShowLeaderboard}
      />
      
      {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ */}
      <Leaderboard
        playerName={playerName}
        visible={showLeaderboard}
        onClose={handleCloseLeaderboard}
      />
      
      {/* –ú–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      {isMobile && gameStarted && !gamePaused && !gameOver && (
        <div className="mobile-controls">
          <div 
            id="leftBtn" 
            className="control-btn left-btn"
            onTouchStart={handleLeftStart}
            onTouchEnd={handleLeftEnd}
            onMouseDown={handleLeftStart}
            onMouseUp={handleLeftEnd}
            onMouseLeave={handleLeftEnd}
          >
            <span className="arrow">‚Üê</span>
          </div>
          <div 
            id="rightBtn" 
            className="control-btn right-btn"
            onTouchStart={handleRightStart}
            onTouchEnd={handleRightEnd}
            onMouseDown={handleRightStart}
            onMouseUp={handleRightEnd}
            onMouseLeave={handleRightEnd}
          >
            <span className="arrow">‚Üí</span>
          </div>
        </div>
      )}
      
      <style jsx>{`
        .game-container {
          position: relative;
          width: 100%;
          max-width: 800px;
          height: 750px;
          margin: 0 auto;
          background-color: transparent;
          overflow: hidden;
          border-radius: 10px;
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }
        
        .mobile-controls {
          position: absolute;
          bottom: 20px;
          left: 0;
          width: 100%;
          display: flex;
          justify-content: space-between;
          padding: 0 20px;
          z-index: 50;
          pointer-events: none;
        }
        
        .control-btn {
          width: 70px;
          height: 70px;
          background-color: rgba(0, 0, 0, 0.5);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 30px;
          color: white;
          cursor: pointer;
          user-select: none;
          pointer-events: auto;
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .arrow {
          display: block;
          line-height: 1;
        }
        
        @media (max-width: 768px) {
          .game-container {
            height: 60vh;
            max-height: 500px;
            min-height: 350px;
            margin: 10px auto;
            padding: 10px;
          }
          
          .control-btn {
            width: 60px;
            height: 60px;
          }
        }
        
        @media (max-width: 480px) {
          .game-container {
            height: 55vh;
            max-height: 400px;
            min-height: 300px;
            margin: 5px auto;
            padding: 5px;
          }
        }
      `}</style>
    </div>
  );
};

export default GameContainer; 